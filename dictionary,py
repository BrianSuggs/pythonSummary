# DICTIONAIRES
# a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)

# Accessing items
x = thisdict["brand"]
y = thisdict["model"]
z = thisdict["year"]
print(z, y, x)

# The get() method will give you the same result
x = thisdict.get("model")

# Changing values
# You can change the value of a specific item by referring to its key name
thisdict["year"] = 2020
print(z, y, x)

# Looping 
# When looping through a dictionary, the return value are the keys of the dictionary, but there are methods to return the values as well
# Print all key names in the dictionary, one by one
for x in thisdict:
  print(x)

# Print all values in the dictionary, one by one
for x in thisdict:
  print(thisdict[x])

# You can also use the values() method to return values of a dictionary
for x in thisdict.values():
  print(x)

# Loop through both keys and values, by using the items() method:
for x, y in thisdict.items():
  print(x, y)

# To determine how many items (key-value pairs) a dictionary has, use the len() function
print(len(thisdict))

# Adding items
# Adding an item to the dictionary is done by using a new index key and assigning a value to it
thisdict["color"] = "red"
print(thisdict)

# Removing items
# The pop() method removes the item with the specified key name
thisdict.pop("model")
print(thisdict)

# The popitem() method removes the last inserted item
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.popitem()
print(thisdict)

# The del keyword removes the item with the specified key name:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
del thisdict["model"]
print(thisdict)

# The clear() method empties the dictionary
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.clear()
print(thisdict)


# Copying a dictionary
# You cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, 
# and changes made in dict1 will automatically also be made in dict2
# Make a copy of a dictionary with the copy() method
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
mydict = thisdict.copy()
print(mydict)

# Make a copy of a dictionary with the dict() function
mydict = dict(thisdict)
print(mydict)

# NESTED DICTIONARIES
myfamily = {
  "child1" : {
    "name" : "Roy",
    "year" : 2030
  },
  "child2" : {
    "name" : "Issac",
    "year" : 2032
  },
  "child3" : {
    "name" : "Brian the Third",
    "year" : 2034
  }
}

# Create three dictionaries, then create one dictionary that will contain the other three dictionaries
child1 = {
  "name" : "Roy",
  "year" : 2030
}
child2 = {
  "name" : "Issac",
  "year" : 2032
}
child3 = {
  "name" : "Brian",
  "year" : 2034
}

myfamily = {
  "child1" : child1,
  "child2" : child2,
  "child3" : child3
}


# DICT CONSTRUCTOR
# It is also possible to use the dict() constructor to make a new dictionary

# note that keywords are not string literals
thisdict = dict(brand="Ford", model="Mustang", year=1964)
print(thisdict)
